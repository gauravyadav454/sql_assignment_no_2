-- sql_assignment-2
use mavenmovies;
-- Basic Aggregate Functions:

-- Question 1. Retrieve the total number of rentals made in the sakila database. 


SELECT COUNT(*) FROM rental;

-- Question 2. Find the average rental duration(in days) of movies rented from the sakila database.


SELECT AVG(rental_duration) FROM film;


-- String Functions:

-- Question 3. Display the first name and last name of customer in uppercase.


SELECT 
    UPPER(first_name), UPPER(last_name)
FROM
    customer;


-- Question 4. Extract the month from the rental date and display it alongside the rental ID.


SELECT 
    rental_id, MONTHNAME(rental_date)
FROM
    rental;


-- GROUP BY:

-- Question 5. Retrieve the count of rentals from each customer(display customer ID and the count of rentals).


SELECT DISTINCT
    customer_id, COUNT(*) AS count_of_rentals
FROM
    rental
GROUP BY customer_id;


-- Question 6. Find the total revenue generated by each store. 


SELECT 
    s.store_id, SUM(p.amount) AS total_revenue
FROM
    store s
        INNER JOIN
    staff st ON s.store_id = st.store_id
        INNER JOIN
    payment p ON st.staff_id = p.staff_id
GROUP BY s.store_id;


-- joins:

-- Question 7.  Display the title of movie, customer's first name, and last name who rented it.


SELECT 
    f.title, c.first_name, c.last_name
FROM
    film f
        INNER JOIN
    inventory i ON f.film_id = i.film_id
        INNER JOIN
    customer c ON c.store_id = i.store_id
        INNER JOIN
    rental r ON r.customer_id = c.customer_id;


-- Question 8. Retrieve the names of all actors who have appeared in the film "Gone with the wind".
 
 
SELECT 
    first_name, last_name
FROM
    actor a
        INNER JOIN
    film_actor fa ON a.actor_id = fa.actor_id
        INNER JOIN
    film f ON f.film_id = fa.film_id
WHERE
    f.title = 'Gone with the wind';


-- GROUP BY:

-- Question 1. Determine the total number of rentals for each category of movies.


SELECT 
    fc.category_id,
    c.name AS category_name,
    COUNT(r.rental_id) AS total_rentals
FROM
    film_category fc
        INNER JOIN
    film f ON fc.film_id = f.film_id
        INNER JOIN
    inventory i ON i.film_id = f.film_id
        INNER JOIN
    rental r ON r.inventory_id = i.inventory_id
        INNER JOIN
    category c ON fc.category_id = c.category_id
GROUP BY fc.category_id , c.name
ORDER BY total_rentals ;

 
 
-- Question 2. Find the average rental rate of movies in each language . 


 SELECT 
    AVG(rental_rate), l.name
FROM
    film as f
        INNER JOIN
    language as l ON l.language_id = f.language_id
GROUP BY l.name;
 
 
 -- joins:
 
 -- Question 3. Retrieve the customer names along with the total amount they've spent on rentals.


SELECT 
    first_name, last_name, SUM(amount) as total_amount
FROM
    customer
        INNER JOIN
    payment ON payment.customer_id = customer.customer_id
        INNER JOIN
    rental ON rental.rental_id = payment.rental_id
GROUP BY first_name , last_name;         

																																																																																																			

-- Question 4. List the titles of movies rented by each customer in a particular city(e.g, 'london')


SELECT 
    CONCAT(first_name, ' ', last_name) AS name, title
FROM
    customer c
        INNER JOIN
    address a ON c.address_id = a.address_id
        INNER JOIN
    city ct ON ct.city_id = a.city_id
        INNER JOIN
    rental r ON c.customer_id = r.customer_id
        INNER JOIN
    inventory i ON i.inventory_id = r.inventory_id
        INNER JOIN
    film f ON f.film_id = i.film_id
WHERE
    ct.city = 'london'
GROUP BY title , name;
    


-- Advanced joins and Group By:

-- Question 5. Display the top 5 rented movies along with the number of times they have rented. 


SELECT 
    title, COUNT(rental_id) AS num_of_time_rented
FROM
    film
        INNER JOIN
    inventory ON film.film_id = inventory.film_id
        INNER JOIN
    rental ON rental.inventory_id = inventory.inventory_id
GROUP BY title
ORDER BY num_of_time_rented DESC
LIMIT 5;

-- Question 6. Determine the customers who have rented movies from both store(store ID 1 and store ID 2). 


SELECT 
    c.customer_id, c.first_name, c.last_name
FROM
    customer c
        INNER JOIN
    rental r ON c.customer_id = r.customer_id
        INNER JOIN
    inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN
    store s ON i.store_id = s.store_id
WHERE
    c.store_id IN (1 , 2)
GROUP BY c.customer_id , c.first_name , c.last_name
HAVING COUNT(DISTINCT s.store_id) = 2;                
  
                                                            

      
                        